#production compose file

services:
  web:
    build: .
    container_name: hotelbookingapp-web
    command: ./wait-for-it.sh postgres:5432 -- ./docker-entrypoint.prod.sh
    restart: always
    env_file:
      - .env
    environment:
      SERVICE: web
      DJANGO_SETTINGS_MODULE: HotelBookingProject.settings.prod
    ports: []  #no ports exposure; services now use nginx not local ports
    volumes:
      - ./logs:/app/logs
      - static-data:/app/static
      - media-data:/app/media
      - gunicorn-socket:/run/gunicorn
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hotelbookingapp-network
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --unix-socket /run/gunicorn/gunicorn.sock http://localhost/health/ || exit 1"]
      retries: 10
      timeout: 10s
      interval: 30s
      start_period: 90s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    image: postgres:17-alpine
    container_name: hotelbookingapp-postgres
    restart: always
    environment:
      POSTGRES_DB: ${PROD_DB_NAME}
      POSTGRES_USER: ${PROD_DB_USER}
      POSTGRES_PASSWORD: ${PROD_DB_PASSWORD}
    ports: []
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - hotelbookingapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      retries: 15
      timeout: 10s
      interval: 5s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "1"

  postgres-backup:
    build: .
    container_name: hotelbookingapp-postgres-backup
    restart: always
    command: ./database-backup-cron.sh
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${PROD_DB_NAME}
      - POSTGRES_USER=${PROD_DB_USER}
      - POSTGRES_PASSWORD=${PROD_DB_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - S3_BUCKET=${S3_BUCKET}
    volumes:
      - ./backups:/backups
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hotelbookingapp-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "1"

  redis:
    image: redis:7.2-alpine
    container_name: hotelbookingapp-redis
    restart: always
    ports: []
    volumes:
      - redis-data:/data
    networks:
      - hotelbookingapp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      retries: 10
      timeout: 30s
      interval: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "1"

  celery:
    build: .
    container_name: hotelbookingapp-celery
    user: "1001:1001"
    command: ./wait-for-it.sh redis:6379 -- celery -A HotelBookingProject worker --loglevel=info
    env_file:
      - .env
    environment:
      SERVICE: celery
      DJANGO_SETTINGS_MODULE: HotelBookingProject.settings.prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - hotelbookingapp-network
    healthcheck:
      test: ["CMD", "celery", "-A", "HotelBookingProject", "inspect", "ping"]
      retries: 10
      timeout: 30s
      interval: 60s
      start_period: 90s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "1"

  celery-beat:
    build: .
    container_name: hotelbookingapp-celerybeat
    user: "1001:1001"
    command: ./wait-for-it.sh postgres:5432 -- ./wait-for-it.sh redis:6379 -- celery -A HotelBookingProject beat --loglevel=info
    env_file:
      - .env
    environment:
      SERVICE: celery-beat
      DJANGO_SETTINGS_MODULE: HotelBookingProject.settings.prod
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hotelbookingapp-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "1"

  nginx:
    build:
      context: ./nginx
    container_name: hotelbookingapp-nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health/"]
      retries: 5
      timeout: 10s
      interval: 30s
      start_period: 60s
    volumes:
      - static-data:/app/static
      - media-data:/app/media
      - gunicorn-socket:/run/gunicorn
      - ./nginx/ssl:/var/www/certbot
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    networks:
      - hotelbookingapp-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "1"

  certbot:
    image: certbot/certbot
    container_name: hotelbookingapp-certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/ssl:/var/www/certbot
    networks:
      - hotelbookingapp-network
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "1"

networks:
  hotelbookingapp-network:
    driver: bridge

volumes:
  pg-data:
  gunicorn-socket:
  redis-data:
  static-data:
  media-data:
  certbot-etc:
  certbot-var:
